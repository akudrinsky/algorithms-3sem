/*
–£—á–µ–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ä–∞—Å–∫–æ–ø–∫–∞—Ö –æ–∫–∞–º–µ–Ω–µ–ª—ã—Ö –æ—Å—Ç–∞–Ω–∫–æ–≤ –¥—Ä–µ–≤–Ω–∏—Ö —Å—É—â–µ—Å—Ç–≤ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ —Å–æ—Å–µ–¥–Ω–µ–π –∑–≤–µ–∑–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —É—á–µ–Ω—ã–µ –ø—ã—Ç–∞—é—Ç—Å—è –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ü–µ–ø–æ—á–∫–∏ –î–ù–ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∏—Å—å –∏–∑ –≥–µ–Ω–æ–≤.

–¶–µ–ø–æ—á–∫–∏ –î–ù–ö –≤—Å–µ—Ö –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö —Å—É—â–µ—Å—Ç–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤. –ö–∞–∂–¥—ã–π –Ω—É–∫–ª–µ–æ—Ç–∏–¥ –æ–±–æ–∑–Ω–∞—á–µ—Ç—Å—è —Å—Ç—Ä–æ—á–Ω–æ–π –±—É–∫–≤–æ–π –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Ü–µ–ø–æ—á–∫–∞ –î–ù–ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.

–ì–µ–Ω —Ç–∞–∫–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å—Ç—Ä–æ–∫—É –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. –ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –≤ –ª—é–±–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –Ω–∞–±–æ—Ä–µ –≥–µ–Ω–æ–≤ –Ω–∏–∫–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–∏.

–ë—É–¥–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å, —á—Ç–æ —Ü–µ–ø–æ—á–∫—É –î–ù–ö ùëë –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞–±–æ—Ä–∞ –≥–µ–Ω–æ–≤ ùê∫, –µ—Å–ª–∏ ùëë –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–µ–Ω–æ–≤: ùëë=ùëî1ùëî2‚Ä¶ùëîùëò, –≥–¥–µ ùëîùëñ ‚Äî –≥–µ–Ω—ã –∏–∑ –Ω–∞–±–æ—Ä–∞ ùê∫. –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–µ–Ω –º–æ–∂–µ—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –î–ù–ö –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.

–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—á–µ–Ω—ã–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –≥–µ–Ω–æ–≤ ùê∫ –∏ –º–∞—Å—Å–∏–≤ —Ü–µ–ø–æ—á–µ–∫ –î–ù–ö —Å—É—â–µ—Å—Ç–≤ ùê∑. –ü–æ –º–µ—Ä–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Å—Ç–∞–Ω–∫–æ–≤, —É—á–µ–Ω—ã–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π –≥–µ–Ω –≤ –Ω–∞–±–æ—Ä ùê∫ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é —Ü–µ–ø–æ—á–∫—É –î–ù–ö –≤ –º–∞—Å—Å–∏–≤ ùê∑. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –Ω–∏ –≤ –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤—É—Ö –≥–µ–Ω–æ–≤, –æ–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥—Ä—É–≥–æ–≥–æ.

–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—á–µ–Ω—ã–µ —Ö–æ—Ç—è—Ç –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —Ü–µ–ø–æ—á–∫–∏ –î–ù–ö –≤ –º–∞—Å—Å–∏–≤–µ ùê∑ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä –≥–µ–Ω–æ–≤ ùê∫. –ü–æ—Å–ª–µ ùëñ-–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ–±—â–∞—Ç—å ùëòùëñ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ø–æ—á–µ–∫ –î–ù–ö, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –º–∞—Å—Å–∏–≤–µ ùê∑, –∫–æ—Ç–æ—Ä—ã–µ –≤–ø–µ—Ä–≤—ã–µ —Å—Ç–∞–ª–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ ùëñ-–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –∑–∞—Ç–µ–º ùëòùëñ —á–∏—Å–µ–ª ‚Äî –Ω–æ–º–µ—Ä–∞ —ç—Ç–∏—Ö —Ü–µ–ø–æ—á–µ–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Å—Ç–∞–Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.

–ü–æ–º–æ–≥–∏—Ç–µ —É—á–µ–Ω—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫—É—é —Å–∏—Å—Ç–µ–º—É.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ ùëõ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å (1‚â§ùëõ‚â§100000).

–í —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫–∞—Ö –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π, ùëñ-—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ ¬´+¬ª, –µ—Å–ª–∏ —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–∞ –≤ –Ω–∞–±–æ—Ä ùê∫, –∏–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞ ¬´?¬ª, –µ—Å–ª–∏ —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –î–ù–ö –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ ùê∑. –î–∞–ª–µ–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ ùë•ùëñ, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É ùë†ùëñ, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª—è–µ–º—ã–π –≤ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≥–µ–Ω –∏–ª–∏ —Ü–µ–ø–æ—á–∫—É –î–ù–ö.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ ùë†ùëñ –∏–∑ —Å—Ç—Ä–æ–∫–∏ ùë•ùëñ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ ùëñ=1, —Ç–æ ùë†ùëñ=ùë•ùëñ. –ò–Ω–∞—á–µ –ø—É—Å—Ç—å —á–∏—Å–ª–æ –≤–ø–µ—Ä–≤—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫ –î–ù–ö –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–≤–Ω–æ ùëòùëñ‚àí1. –í—ã–ø–æ–ª–Ω–∏–º ùëòùëñ‚àí1 —Ä–∞–∑ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: –ø–µ—Ä–µ–Ω–µ—Å–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª ùë•ùëñ –≤ –∫–æ–Ω–µ—Ü. –ò–Ω–∞—á–µ –≥–æ–≤–æ—Ä—è, –≤—ã–ø–æ–ª–Ω–∏–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ —Å—Ç—Ä–æ–∫–∏ ùë•ùëñ –≤–ª–µ–≤–æ –Ω–∞ ùëòùëñ‚àí1. –ü–æ–ª—É—á–∏–≤—à–∞—è—Å—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–≤–Ω–∞ ùë†ùëñ ‚Äî –≥–µ–Ω –∏–ª–∏ —Ü–µ–ø–æ—á–∫–∞ –î–ù–ö, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ ùëñ-–π –æ–ø–µ—Ä–∞—Ü–∏–∏.

–í—Å–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—É—Å—Ç—ã, —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫ –≤–æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 106.

–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –Ω–∏ –≤ –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤—É—Ö –≥–µ–Ω–æ–≤, –æ–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥—Ä—É–≥–æ–≥–æ.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ ùëõ —Å—Ç—Ä–æ–∫.

–í ùëñ-–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–∏—Å–ª–æ ùëòùëñ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ø–æ—á–µ–∫ –î–ù–ö, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –º–∞—Å—Å–∏–≤–µ ùê∑, –∫–æ—Ç–æ—Ä—ã–µ –≤–ø–µ—Ä–≤—ã–µ —Å—Ç–∞–ª–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ ùëñ-–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –∑–∞—Ç–µ–º ùëòùëñ —á–∏—Å–µ–ª ‚Äî –Ω–æ–º–µ—Ä–∞ —ç—Ç–∏—Ö —Ü–µ–ø–æ—á–µ–∫. –¶–µ–ø–æ—á–∫–∏ –Ω—É–º–µ—Ä—É—é—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤ ùê∑. –ù–æ–º–µ—Ä–∞ —Ü–µ–ø–æ—á–µ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ.
*/

#include <iostream>
#include <queue>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

class DNAfromGens {
   public:
    DNAfromGens() : root(new Node) {}

    std::vector<long long> NewDNA(const std::string& inputString);

    std::vector<long long> NewGene(const std::string& inputString);

    ~DNAfromGens();

   private:
    struct Node {
        std::unordered_map<char, Node*> children;
        std::unordered_set<long long> pending;

        bool isTerminal() const;
    };

    struct DNA {
        const std::string inputString;
        long long pos;
        Node* node;

        DNA(Node* node, const std::string& inputString);
    };

    std::vector<DNA> DNAsToProcess;
    Node* root;

    bool pushDNA(long long id);
};

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//-------------------------------------MAIN-------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

int main() {
    long long n = 0;
    std::cin >> n;

    DNAfromGens ProblemSolver;

    long long k = 0;
    for (int i = 0; i < n; ++i) {
        char op = 0;
        std::cin >> op;

        std::string inputString;
        std::cin >> inputString;

        k %= inputString.length();
        if (k > 0) {
            inputString = inputString.substr(k, inputString.length() - k) +
                          inputString.substr(0, k);
        }

        std::vector<long long> ans(0);

        if (op == '+') {
            ans = ProblemSolver.NewGene(inputString);
        } else {
            ans = ProblemSolver.NewDNA(std::move(inputString));
        }

        k = ans.size();
        std::cout << k << " ";

        for (const auto& id : ans) std::cout << (id + 1) << " ";

        std::cout << "\n";
    }
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//-------------------------------------IMPL-------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

std::vector<long long> DNAfromGens::NewDNA(const std::string& inputString) {
    const long long id = DNAsToProcess.size();
    root->pending.insert(id);
    DNAsToProcess.emplace_back(root, std::move(inputString));
    if (pushDNA(id)) return {id};
    return {};
}

std::vector<long long> DNAfromGens::NewGene(const std::string& inputString) {
    std::vector<long long> to_update;

    Node* curNode = root;
    for (const auto& c : inputString) {
        if (!curNode->children.count(c)) {
            curNode->children.insert({c, new Node});

            for (const int& id : curNode->pending) {
                const DNA& dna = DNAsToProcess[id];
                if (dna.inputString[dna.pos] == c) to_update.push_back(id);
            }
        }

        curNode = curNode->children.at(c);
    }

    std::vector<long long> ans;
    for (const long long& id : to_update)
        if (pushDNA(id)) ans.push_back(id);


    return ans;
}

DNAfromGens::~DNAfromGens() { delete root; }

bool DNAfromGens::Node::isTerminal() const { return children.empty(); }

DNAfromGens::DNA::DNA(DNAfromGens::Node* node, const std::string& inputString)
    : node(node), inputString(inputString), pos(0) {}

bool DNAfromGens::pushDNA(long long id) {
    DNA& dna = DNAsToProcess[id];
    Node* curNode = dna.node;
    curNode->pending.erase(id);

    while (dna.pos < dna.inputString.length()) {
        const char& c = dna.inputString[dna.pos];

        if (curNode->children.count(c)) {
            curNode = curNode->children[c];
            ++dna.pos;
        } else if (curNode->isTerminal() and curNode != root)
            curNode = root;
        else
            break;
    }

    if (dna.pos == dna.inputString.length() and curNode->isTerminal())
        return true;

    if (dna.pos < dna.inputString.length()) {
        curNode->pending.insert(id);
        dna.node = curNode;
    } else
        dna.node = nullptr;

    return false;
}